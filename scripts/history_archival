-- Create archival_log table
CREATE TABLE archival_log (
    id INT AUTO_INCREMENT PRIMARY KEY,
    archival_batch_id VARCHAR(36) NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME,
    success_flag BOOLEAN,
    records_archived INT,
    error_message TEXT,
    additional_info JSON
);
 
-- Create archive tables
 
-- Archive table for incoming_requests
CREATE TABLE archive_incoming_requests (
    id INT PRIMARY KEY,
    transaction_id VARCHAR(255),
    source VARCHAR(255),
    created_at DATETIME,
    other_metadata JSON,
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Archive table for event_logs
CREATE TABLE archive_event_logs (
    id INT PRIMARY KEY,
    transaction_id VARCHAR(255),
    mmid INT,
    material_type VARCHAR(255),
    incoming_payload TEXT,
    success_flag BOOLEAN,
    error_id INT,
    success_payload TEXT,
    event_type VARCHAR(255),
    event_status_message TEXT,
    created_at DATETIME,
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Archive table for payload_info
CREATE TABLE archive_payload_info (
    id INT PRIMARY KEY,
    payload TEXT,
    created_at DATETIME,
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Archive table for error_report
CREATE TABLE archive_error_report (
    id INT PRIMARY KEY,
    error_code VARCHAR(255),
    error_details TEXT,
    mmid INT,
    error_raised_in VARCHAR(255),
    severity VARCHAR(50),
    created_at DATETIME,
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Archive table for zroh_material_number_history
CREATE TABLE archive_zroh_material_number_history (
    id INT PRIMARY KEY,
    alternate_id VARCHAR(255),
    request_id INT,
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Archive table for material_type_material_number_mapping
CREATE TABLE archive_material_type_material_number_mapping (
    id INT PRIMARY KEY,
    material_type VARCHAR(255),
    latest_mmid INT,
    start_range INT,
    end_range INT,
    updated_at DATETIME,
    last_used_material VARCHAR(255),
    archived_at DATETIME,
    archival_batch_id VARCHAR(36)
);
 
-- Create indexes on archival_batch_id for each archive table
CREATE INDEX idx_archival_batch_id ON archive_incoming_requests(archival_batch_id);
CREATE INDEX idx_archival_batch_id ON archive_event_logs(archival_batch_id);
CREATE INDEX idx_archival_batch_id ON archive_payload_info(archival_batch_id);
CREATE INDEX idx_archival_batch_id ON archive_error_report(archival_batch_id);
CREATE INDEX idx_archival_batch_id ON archive_zroh_material_number_history(archival_batch_id);
CREATE INDEX idx_archival_batch_id ON archive_material_type_material_number_mapping(archival_batch_id);
 
-- Archival Process Stored Procedure
DELIMITER //
 
CREATE PROCEDURE perform_archival()
BEGIN
    -- Declare variables
    DECLARE archival_batch_id VARCHAR(36);
    DECLARE log_id INT;
    DECLARE records_archived INT DEFAULT 0;
    DECLARE error_message TEXT;
 
    -- Generate a new UUID for this archival batch
    SET archival_batch_id = UUID();
 
    -- Start the archival process and log the start time
    INSERT INTO archival_log (archival_batch_id, start_time)
    VALUES (archival_batch_id, NOW());
    SET log_id = LAST_INSERT_ID();
 
    -- Start transaction
    START TRANSACTION;
 
    BEGIN
        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
        BEGIN
            GET DIAGNOSTICS CONDITION 1
            error_message = MESSAGE_TEXT;
            ROLLBACK;
            -- Log error
            UPDATE archival_log
            SET end_time = NOW(),
                success_flag = FALSE,
                error_message = error_message
            WHERE id = log_id;
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
        END;
 
        -- Archive incoming_requests
        INSERT INTO archive_incoming_requests
        SELECT id, transaction_id, source, created_at, other_metadata, NOW(), archival_batch_id
        FROM incoming_requests
        WHERE created_at < DATE_SUB(NOW(), INTERVAL 3 MONTH);
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Archive event_logs
        INSERT INTO archive_event_logs
        SELECT e.*, NOW(), archival_batch_id
        FROM event_logs e
        JOIN archive_incoming_requests air ON e.transaction_id = air.transaction_id
        WHERE air.archival_batch_id = archival_batch_id;
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Archive payload_info
        INSERT INTO archive_payload_info
        SELECT pi.*, NOW(), archival_batch_id
        FROM payload_info pi
JOIN archive_event_logs ael ON pi.id = ael.id
        WHERE ael.archival_batch_id = archival_batch_id;
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Archive error_report
        INSERT INTO archive_error_report
        SELECT er.*, NOW(), archival_batch_id
        FROM error_report er
JOIN archive_event_logs ael ON er.id = ael.error_id
        WHERE ael.archival_batch_id = archival_batch_id;
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Archive zroh_material_number_history
        INSERT INTO archive_zroh_material_number_history
        SELECT zmnh.*, NOW(), archival_batch_id
        FROM zroh_material_number_history zmnh
JOIN archive_incoming_requests air ON zmnh.request_id = air.id
        WHERE air.archival_batch_id = archival_batch_id;
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Archive material_type_material_number_mapping
        INSERT INTO archive_material_type_material_number_mapping
        SELECT mtmnm.*, NOW(), archival_batch_id
        FROM material_type_material_number_mapping mtmnm
JOIN archive_event_logs ael ON mtmnm.id = ael.mmid
        WHERE ael.archival_batch_id = archival_batch_id;
        
        SET records_archived = records_archived + ROW_COUNT();
 
        -- Delete archived data from original tables
        DELETE FROM material_type_material_number_mapping
        WHERE id IN (SELECT id FROM archive_material_type_material_number_mapping WHERE archival_batch_id = archival_batch_id);
 
        DELETE FROM zroh_material_number_history
        WHERE id IN (SELECT id FROM archive_zroh_material_number_history WHERE archival_batch_id = archival_batch_id);
 
        DELETE FROM error_report
        WHERE id IN (SELECT id FROM archive_error_report WHERE archival_batch_id = archival_batch_id);
 
        DELETE FROM payload_info
        WHERE id IN (SELECT id FROM archive_payload_info WHERE archival_batch_id = archival_batch_id);
 
        DELETE FROM event_logs
        WHERE id IN (SELECT id FROM archive_event_logs WHERE archival_batch_id = archival_batch_id);
 
        DELETE FROM incoming_requests
        WHERE id IN (SELECT id FROM archive_incoming_requests WHERE archival_batch_id = archival_batch_id);
 
        -- Commit transaction
        COMMIT;
 
        -- Log successful completion
        UPDATE archival_log
        SET end_time = NOW(),
            success_flag = TRUE,
            records_archived = records_archived,
            additional_info = JSON_OBJECT('tables_archived', JSON_ARRAY('incoming_requests', 'event_logs', 'payload_info', 'error_report', 'zroh_material_number_history', 'material_type_material_number_mapping'))
        WHERE id = log_id;
    END;
END //
 
DELIMITER ;
 
-- To run the archival process:
-- CALL perform_archival();
